import { useParams, useNavigate } from 'react-router-dom';
import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Header } from '@/components/layout/Header';
import { useCurrentUser, useLogout } from '@/hooks/useAuth';
import { useStory } from '@/hooks/useStories';
import { getErrorMessage } from '@/utils/errorHandler';
import type { StoryResult } from '@/services/api';
import HTMLFlipBook from 'react-pageflip';
import html2pdf from 'html2pdf.js';

function StoryDetailPage() {
  const { id: taskId } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { data: user } = useCurrentUser();
  const { data: storyData, isLoading, error } = useStory(taskId!);
  const logoutMutation = useLogout();
  
  const [showBook, setShowBook] = useState(false);

  // Show book when story is loaded
  useEffect(() => {
    if (storyData?.status === 'SUCCESS') {
      setTimeout(() => setShowBook(true), 400);
    } else {
      setShowBook(false);
    }
  }, [storyData]);

  const handleLogout = async () => {
    try {
      await logoutMutation.mutateAsync();
      navigate('/');
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
        <Header user={user} onLogout={handleLogout} isLoggingOut={logoutMutation.isPending} />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center py-16">
            <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-amber-600 mx-auto mb-6"></div>
            <div className="text-xl text-amber-700 font-semibold animate-pulse">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>
          </div>
        </div>
      </div>
    );
  }

  if (error || !storyData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
        <Header user={user} onLogout={handleLogout} isLoggingOut={logoutMutation.isPending} />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <Card className="p-8 text-center bg-white/90 backdrop-blur-sm border-0 shadow-lg">
            <svg className="w-16 h-16 text-red-500 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
            <p className="text-gray-600 mb-6">
              {error ? getErrorMessage(error) : '–ò—Å—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞'}
            </p>
            <Button onClick={() => navigate('/stories')}>
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏—è–º
            </Button>
          </Card>
        </div>
      </div>
    );
  }

  if (storyData.status === 'PENDING' || storyData.status === 'STARTED' || storyData.status === 'RETRY') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
        <Header user={user} onLogout={handleLogout} isLoggingOut={logoutMutation.isPending} />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="mb-6">
            <Button
              variant="outline"
              onClick={() => navigate('/stories')}
              className="text-gray-600 hover:text-gray-800"
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏—è–º
            </Button>
          </div>
          
          <Card className="p-8 text-center bg-white/90 backdrop-blur-sm border-0 shadow-lg">
            <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-amber-600 mx-auto mb-6"></div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è</h2>
            <p className="text-gray-600 mb-6">
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
            </p>
            <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
              <p className="text-amber-700 text-sm">
                üí° –°—Ç–∞—Ç—É—Å: {storyData.status === 'PENDING' ? '–í –æ—á–µ—Ä–µ–¥–∏' : '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è'}
              </p>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  if (storyData.status === 'FAILURE') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
        <Header user={user} onLogout={handleLogout} isLoggingOut={logoutMutation.isPending} />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="mb-6">
            <Button
              variant="outline"
              onClick={() => navigate('/stories')}
              className="text-gray-600 hover:text-gray-800"
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏—è–º
            </Button>
          </div>
          
          <Card className="p-8 text-center bg-white/90 backdrop-blur-sm border-0 shadow-lg">
            <svg className="w-16 h-16 text-red-500 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h2>
            <p className="text-gray-600 mb-6">
              –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.
            </p>
            <div className="flex gap-3 justify-center">
              <Button onClick={() => navigate('/stories')}>
                ‚Üê –ö –∏—Å—Ç–æ—Ä–∏—è–º
              </Button>
              <Button onClick={() => navigate('/stories')} className="bg-amber-600 hover:bg-amber-700 text-white">
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é
              </Button>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  // Story is ready - show the book
  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
      <Header user={user} onLogout={handleLogout} isLoggingOut={logoutMutation.isPending} />
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-6">
          <Button
            variant="outline"
            onClick={() => navigate('/stories')}
            className="text-gray-600 hover:text-gray-800"
          >
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏—è–º
          </Button>
        </div>
        
        {showBook && storyData.status === 'SUCCESS' && (
          <StoryBook story={storyData} />
        )}
      </div>
    </div>
  );
}

// StoryBook component (restored original from StoryGeneratorPage)
function StoryBook({ story }: { story: StoryResult }) {
  const bookRef = useRef<HTMLDivElement>(null);
  const [isDownloading, setIsDownloading] = useState(false);

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const script: any = (story as any).script ?? story;
  const title = script.title ?? 'Generated Story';
  const scenes: any[] = script.scenes ?? [];
  const styleBlock = (story as any).style?.style ?? (story as any).style ?? null;
  const environmentsBlock = (story as any).environments?.environments ?? (story as any).environments ?? [];
  const charactersBlock = (story as any).characters;
  const characterList = Array.isArray(charactersBlock)
    ? charactersBlock
    : charactersBlock?.characters ?? [];
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π
  const illustrationsBlock = (story as any).illustrations;
  const illustrationsList = Array.isArray(illustrationsBlock)
    ? illustrationsBlock
    : illustrationsBlock?.illustrations ?? [];
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π –ø–æ scene_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const illustrationsMap = new Map();
  illustrationsList.forEach((ill: any) => {
    if (ill.scene_id && ill.image_url) {
      illustrationsMap.set(ill.scene_id, ill.image_url);
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω
  const expandSceneText = (originalText: string, sceneIndex: number, totalScenes: number): string => {
    if (!originalText || originalText.length < 50) {
      return originalText;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –¥–µ—Ç–∞–ª–∏
    const transitions = [
      "–ú–µ–∂–¥—É —Ç–µ–º", "–¢–µ–º –≤—Ä–µ–º–µ–Ω–µ–º", "–í —ç—Ç–æ –≤—Ä–µ–º—è", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ", "–í–¥—Ä—É–≥", 
      "–í–Ω–µ–∑–∞–ø–Ω–æ", "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ", "–ó–∞—Ç–µ–º", "–í —Å–ª–µ–¥—É—é—â–∏–π –º–æ–º–µ–Ω—Ç"
    ];
    
    const descriptiveWords = [
      "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π", "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π", "–≤–æ–ª—à–µ–±–Ω—ã–π", "—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π",
      "–∑–∞–≥–∞–¥–æ—á–Ω—ã–π", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π", "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π", "–Ω–µ–æ–±—ã—á–Ω—ã–π", "—á—É–¥–µ—Å–Ω—ã–π"
    ];

    let expandedText = originalText;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏
    if (sceneIndex > 0 && Math.random() > 0.5) {
      const transition = transitions[Math.floor(Math.random() * transitions.length)];
      expandedText = `${transition}, ${expandedText.toLowerCase()}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    if (expandedText.length < 150) {
      const adjective = descriptiveWords[Math.floor(Math.random() * descriptiveWords.length)];
      expandedText += ` –≠—Ç–æ –±—ã–ª –ø–æ–∏—Å—Ç–∏–Ω–µ ${adjective} –º–æ–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏.`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É
    if (sceneIndex === totalScenes - 1) {
      expandedText += " –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥—Ö–æ–¥–∏–ª–∞ –∫ —Å–≤–æ–µ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é, –æ—Å—Ç–∞–≤–ª—è—è –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.";
    } else if (sceneIndex === 0) {
      expandedText = "–ù–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å. " + expandedText;
    }

    return expandedText;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–∏–≥–µ
  const enhanceSceneText = (originalText: string, sceneIndex: number, totalScenes: number, pageNumber: number): string => {
    if (!originalText) return originalText;

    let enhancedText = originalText;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–ª–∞–≤—ã
    if (sceneIndex === 0 && pageNumber > 3) {
      const openings = [
        "–í —ç—Ç–æ–π —á–∞—Å—Ç–∏ –Ω–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞—Å—Å–∫–∞–∑",
        "–†–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–≤–µ–ª–æ –∫ —Ç–æ–º—É, —á—Ç–æ",
        "–î–∞–ª–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Å–ª–µ–¥—É—é—â–µ–µ:"
      ];
      const opening = openings[Math.floor(Math.random() * openings.length)];
      enhancedText = `${opening} ${enhancedText.toLowerCase()}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (sceneIndex > 0) {
      const transitions = ["–¢–µ–º –≤—Ä–µ–º–µ–Ω–µ–º", "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ", "–ó–∞—Ç–µ–º", "–í —ç—Ç–æ –≤—Ä–µ–º—è"];
      if (Math.random() > 0.6) {
        const transition = transitions[Math.floor(Math.random() * transitions.length)];
        enhancedText = `${transition}, ${enhancedText.toLowerCase()}`;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ü–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (sceneIndex === totalScenes - 1 && totalScenes > 1) {
      enhancedText += " –ò —Ç–∞–∫ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞—Å—å –¥–∞–ª—å—à–µ...";
    }

    return enhancedText;
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF
  const downloadPDF = async () => {
    if (!bookRef.current) return;
    
    setIsDownloading(true);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∏–¥–∏–º—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'fixed';
      tempDiv.style.left = '0';
      tempDiv.style.top = '0';
      tempDiv.style.width = '210mm';
      tempDiv.style.zIndex = '-1000';
      tempDiv.style.backgroundColor = 'white';
      tempDiv.style.fontFamily = 'Times New Roman, serif';
      tempDiv.style.color = '#2c2c2c';
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML –¥–ª—è PDF
      let pdfContent = '';
      
      // –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      pdfContent += `
        <div style="page-break-after: always; padding: 50px; min-height: 280mm; text-align: center; display: flex; align-items: center; justify-content: center;">
          <div>
            <h1 style="font-size: 36px; font-weight: bold; margin-bottom: 40px; text-transform: uppercase; letter-spacing: 4px; line-height: 1.2;">${title}</h1>
            <div style="font-size: 24px; color: #d4af37; margin: 30px 0; letter-spacing: 3px;">‚ú¶ ‚ú¶ ‚ú¶</div>
            <p style="font-size: 20px; font-style: italic; color: #666; margin-top: 50px;">–°–∫–∞–∑–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è ToonzyAI</p>
          </div>
        </div>
      `;
      
      // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      if (characterList.length > 0) {
        pdfContent += `
          <div style="page-break-after: always; padding: 50px; min-height: 280mm;">
            <h2 style="font-size: 26px; font-weight: bold; text-align: center; margin-bottom: 40px; text-transform: uppercase; border-bottom: 2px solid #666; padding-bottom: 15px; letter-spacing: 2px;">–ü–ï–†–°–û–ù–ê–ñ–ò</h2>
            ${characterList.map((char: any) => `
              <div style="margin-bottom: 30px; font-size: 18px; border-bottom: 1px dotted #999; padding-bottom: 20px;">
                <div style="font-weight: bold; font-size: 22px; color: #333;">${char.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'}</div>
                ${char.role ? `<div style="font-style: italic; color: #666; font-size: 18px; margin-top: 5px;">‚Äî ${char.role}</div>` : ''}
                ${char.description ? `<div style="margin-top: 12px; font-style: italic; color: #555; line-height: 1.6; font-size: 16px;">${char.description}</div>` : ''}
              </div>
            `).join('')}
          </div>
        `;
      }
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      if (scenes.length > 0) {
        const contentPagesCount = 5;
        const scenesPerPage = Math.max(1, Math.ceil(scenes.length / contentPagesCount));
        
        for (let pageIndex = 0; pageIndex < contentPagesCount; pageIndex++) {
          const pageNum = pageIndex + (characterList.length > 0 ? 3 : 2);
          const sceneStartIndex = pageIndex * scenesPerPage;
          const sceneEndIndex = Math.min(sceneStartIndex + scenesPerPage, scenes.length);
          const pageScenes = scenes.slice(sceneStartIndex, sceneEndIndex);
          
          const isLastPage = pageIndex === contentPagesCount - 1;
          
          pdfContent += `
            <div style="page-break-after: ${isLastPage ? 'avoid' : 'always'}; padding: 50px; min-height: 280mm;">
              <h2 style="font-size: 22px; text-align: center; margin-bottom: 35px; color: #555; text-transform: uppercase; border-bottom: 2px solid #ddd; padding-bottom: 12px; letter-spacing: 2px;">–ì–õ–ê–í–ê ${pageIndex + 1}</h2>
              ${pageScenes.length > 0 ? pageScenes.map((scene, sceneIndex) => {
                const sceneText = scene.description || scene.environment_description || '';
                // –†–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                const expandedText = expandSceneText(sceneText, sceneIndex, pageScenes.length);
                return `
                  <div style="margin-bottom: 40px;">
                    <p style="font-size: 16px; line-height: 1.9; text-align: justify; margin: 0 0 20px 0; text-indent: 30px; color: #333; font-family: 'Times New Roman', serif;">${expandedText}</p>
                    ${sceneIndex < pageScenes.length - 1 ? '<div style="text-align: center; margin: 30px 0; color: #999; font-size: 18px; letter-spacing: 4px;">‚Ä¢ ‚Ä¢ ‚Ä¢</div>' : ''}
                  </div>
                `;
               }).join('') : `
                 <div style="text-align: center; margin-top: 120px; font-style: italic; color: #666;">
                   ${pageNum === 8 ? '<div style="border-top: 2px solid #ddd; padding-top: 30px; margin-top: 60px;"><div style="font-size: 28px; font-weight: bold; color: #333; text-transform: uppercase; letter-spacing: 3px; margin-bottom: 20px;">–ö–û–ù–ï–¶</div><div style="font-size: 18px; margin-top: 20px; color: #666;">–°–ø–∞—Å–∏–±–æ –∑–∞ —á—Ç–µ–Ω–∏–µ!</div></div>' : ''}
                 </div>
               `}
               <div style="position: absolute; bottom: 20px; right: 40px; font-size: 10px; color: #666;">[${pageNum}]</div>
             </div>
           `;
        }
      }
      
      tempDiv.innerHTML = pdfContent;
      document.body.appendChild(tempDiv);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PDF
      const options = {
        margin: [10, 10, 10, 10],
        filename: `${title.replace(/[^a-zA-Z0-9\u0400-\u04FF\s]/g, '_')}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { 
          scale: 2,
          useCORS: false,
          allowTaint: false,
          backgroundColor: '#ffffff',
          logging: false
        },
        jsPDF: { 
          unit: 'mm', 
          format: 'a4', 
          orientation: 'portrait'
        }
      };
      
      await html2pdf().from(tempDiv).set(options).save();
      
      // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      document.body.removeChild(tempDiv);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsDownloading(false);
    }
  };

  // –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É —Å—Ç—Ä–æ–≥–æ –Ω–∞ 8 —Å—Ç—Ä–∞–Ω–∏—Ü
  const createBookPages = () => {
    const pages = [];

    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –¢–∏—Ç—É–ª—å–Ω–∞—è
    pages.push(
      <div key="title" className="w-full h-full bg-gradient-to-b from-amber-50 to-orange-50 flex flex-col relative border border-amber-200 font-serif shadow-inner">
        <div className="flex-1 flex items-center justify-center p-8 text-center">
          <div className="max-w-lg space-y-10">
            <h1 className="text-5xl font-bold text-gray-800 tracking-widest uppercase leading-tight">
              {title}
            </h1>
            <div className="text-3xl text-amber-600 font-light tracking-wider">
              ‚ú¶ ‚ú¶ ‚ú¶
            </div>
            <p className="text-2xl italic text-amber-700 mt-10">
              –°–∫–∞–∑–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è ToonzyAI
            </p>
          </div>
        </div>
        <div className="absolute bottom-6 right-8 text-lg text-amber-600">
          [1]
        </div>
      </div>
    );

    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (characterList.length > 0) {
      pages.push(
        <div key="characters" className="w-full h-full bg-gradient-to-b from-blue-50 to-indigo-50 flex flex-col relative border border-blue-200 font-serif p-8">
          <div className="flex-1 overflow-hidden">
            <h2 className="text-4xl font-bold text-center mb-10 text-gray-800 uppercase tracking-wide border-b border-blue-300 pb-6">
              –ü–ï–†–°–û–ù–ê–ñ–ò
            </h2>
            <div className="space-y-8 mt-10">
              {characterList.map((char: any, idx: number) => (
                <div key={char.name || idx} className="border-b border-dotted border-blue-300 pb-8 last:border-b-0">
                  <div className="text-2xl font-bold text-gray-800">
                    {char.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'}
                    {char.role && <span className="text-xl italic text-blue-600 font-normal"> ‚Äî {char.role}</span>}
                  </div>
                  {char.description && (
                    <div className="mt-4 text-xl text-gray-600 italic leading-relaxed">
                      {char.description}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
          <div className="absolute bottom-6 right-8 text-lg text-blue-600">
            [2]
          </div>
        </div>
      );

      // –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3: –ü—Ä–æ–ª–æ–≥/–í–≤–µ–¥–µ–Ω–∏–µ
      pages.push(
        <div key="prologue" className="w-full h-full bg-gradient-to-b from-purple-50 to-pink-50 flex flex-col relative border border-purple-200 font-serif p-8">
          <div className="flex-1 overflow-hidden">
            <h2 className="text-4xl font-bold text-center mb-12 text-gray-800 uppercase tracking-wide border-b border-purple-300 pb-6">
              –ü–†–û–õ–û–ì
            </h2>
            <div className="space-y-10 mt-12">
              <p className="text-2xl leading-relaxed text-gray-800 text-justify indent-10 font-serif">
                –ù–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–º –º–∏—Ä–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–æ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. 
                –ó–¥–µ—Å—å, —Å—Ä–µ–¥–∏ –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –º–µ—Å—Ç, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –≤—Å—ë –Ω–∞–≤—Å–µ–≥–¥–∞.
              </p>
              <p className="text-2xl leading-relaxed text-gray-800 text-justify indent-10 font-serif">
                –≠—Ç–æ —Ä–∞—Å—Å–∫–∞–∑ –æ —Ö—Ä–∞–±—Ä–æ—Å—Ç–∏ –∏ –¥—Ä—É–∂–±–µ, –æ —Ç–æ–º, –∫–∞–∫ –≤–∞–∂–Ω–æ –≤–µ—Ä–∏—Ç—å –≤ —Å–≤–æ–∏ –º–µ—á—Ç—ã –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è. 
                –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é, –ø–æ–ª–Ω–æ–º—É —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤!
              </p>
            </div>
          </div>
          <div className="absolute bottom-6 right-8 text-lg text-purple-600">
            [3]
          </div>
        </div>
      );
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2-3 –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è
      pages.push(
        <div key="intro1" className="w-full h-full bg-gradient-to-b from-blue-50 to-indigo-50 flex flex-col relative border border-blue-200 font-serif p-8">
          <div className="flex-1 overflow-hidden">
            <h2 className="text-4xl font-bold text-center mb-12 text-gray-800 uppercase tracking-wide border-b border-blue-300 pb-6">
              –í–í–ï–î–ï–ù–ò–ï
            </h2>
            <div className="space-y-10 mt-12">
              <p className="text-2xl leading-relaxed text-gray-800 text-justify indent-10 font-serif">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π, –≥–¥–µ —Ñ–∞–Ω—Ç–∞–∑–∏—è –Ω–µ –∑–Ω–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü, 
                –∞ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–æ –º–∞–≥–∏–µ–π –∏ —á—É–¥–µ—Å–∞–º–∏.
              </p>
            </div>
          </div>
          <div className="absolute bottom-6 right-8 text-lg text-blue-600">
            [2]
          </div>
        </div>
      );

      pages.push(
        <div key="intro2" className="w-full h-full bg-gradient-to-b from-purple-50 to-pink-50 flex flex-col relative border border-purple-200 font-serif p-8">
          <div className="flex-1 overflow-hidden">
            <h2 className="text-4xl font-bold text-center mb-12 text-gray-800 uppercase tracking-wide border-b border-purple-300 pb-6">
              –ì–õ–ê–í–ê –ü–ï–†–í–ê–Ø
            </h2>
            <div className="space-y-10 mt-12">
              <p className="text-2xl leading-relaxed text-gray-800 text-justify indent-10 font-serif">
                –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –≤ —ç—Ç–æ–º —Å–∞–º–æ–º –º–µ—Å—Ç–µ, –≤ —ç—Ç–æ—Ç —Å–∞–º—ã–π –º–æ–º–µ–Ω—Ç. 
                –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é...
              </p>
            </div>
          </div>
          <div className="absolute bottom-6 right-8 text-lg text-purple-600">
            [3]
          </div>
        </div>
      );
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏
    if (scenes.length > 0) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      const contentPagesCount = 5; // –°—Ç—Ä–∞–Ω–∏—Ü—ã 4-8
      const startPageNumber = 4;
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è —Å—Ü–µ–Ω—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      const scenesPerPage = Math.ceil(scenes.length / contentPagesCount);
      
      for (let pageIndex = 0; pageIndex < contentPagesCount; pageIndex++) {
        const pageNumber = startPageNumber + pageIndex; // –°—Ç—Ä–∞–Ω–∏—Ü—ã 4-8
        const sceneStartIndex = pageIndex * scenesPerPage;
        const sceneEndIndex = Math.min(sceneStartIndex + scenesPerPage, scenes.length);
        const pageScenes = scenes.slice(sceneStartIndex, sceneEndIndex);
        
        if (pageScenes.length > 0) {
          pages.push(
            <div key={`page-${pageNumber}`} className="w-full h-full bg-gradient-to-b from-green-50 to-emerald-50 flex flex-col relative border border-green-200 font-serif p-6">
              <div className="flex-1 overflow-hidden">
                <h2 className="text-xl text-center mb-6 text-green-700 uppercase tracking-widest border-b border-green-300 pb-3">
                  {title.toUpperCase()}
                </h2>
                <div className="space-y-6 h-full overflow-hidden">
                  {pageScenes.map((scene, idx) => {
                    const sceneText = scene.description || scene.environment_description || '';
                    const imageUrl = illustrationsMap.get(scene.id);
                    const isFirstScene = idx === 0;
                    const isLastScene = idx === pageScenes.length - 1;
                    
                    // –†–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —á—Ç–µ–Ω–∏—è
                    const enhancedText = enhanceSceneText(sceneText, idx, pageScenes.length, pageNumber);
                    
                    return (
                      <div key={scene.id} className="space-y-4">
                        {isFirstScene && pageNumber > 3 && (
                          <div className="border-b border-dotted border-green-300 pb-3 mb-4">
                            <h3 className="text-3xl font-bold text-center text-gray-800 uppercase tracking-wide">
                              –ì–ª–∞–≤–∞ {pageNumber - 3}
                            </h3>
                          </div>
                        )}
                        {imageUrl && (
                          <div className="text-center mb-4">
                            <img 
                              src={imageUrl} 
                              alt={`–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ —Å—Ü–µ–Ω–µ ${scene.id}`}
                              className="max-w-full h-64 w-auto mx-auto rounded-lg border border-green-300 shadow-lg object-cover"
                              onError={(e) => {
                                // –°–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                                (e.target as HTMLElement).style.display = 'none';
                              }}
                            />
                          </div>
                        )}
                        <div className="flex-1">
                          <p className="text-2xl leading-relaxed text-gray-800 text-justify indent-10 font-serif mb-4">
                            {enhancedText}
                          </p>
                          {!isLastScene && pageScenes.length > 1 && (
                            <div className="text-center text-green-600 text-xl tracking-widest my-4">
                              ‚Ä¢ ‚Ä¢ ‚Ä¢
                            </div>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
              <div className="absolute bottom-6 right-8 text-lg text-green-600">
                [{pageNumber}]
              </div>
            </div>
          );
        } else {
          // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
          pages.push(
            <div key={`page-${pageNumber}`} className="w-full h-full bg-gradient-to-b from-gray-50 to-slate-50 flex flex-col relative border border-gray-200 font-serif p-8">
              <div className="flex-1 overflow-hidden">
                <h2 className="text-xl text-center mb-10 text-gray-600 uppercase tracking-widest border-b border-gray-300 pb-4">
                  {title.toUpperCase()}
                </h2>
                <div className="flex-1 flex items-center justify-center">
                  {pageNumber === 8 ? (
                    <div className="text-center border-t border-gray-300 pt-10 mt-24">
                      <div className="text-4xl font-bold text-gray-800 uppercase tracking-wide mb-6">
                        –ö–û–ù–ï–¶
                      </div>
                      <div className="text-2xl text-gray-600 italic">
                        –°–ø–∞—Å–∏–±–æ –∑–∞ —á—Ç–µ–Ω–∏–µ!
                      </div>
                    </div>
                  ) : (
                    <div className="text-center text-gray-500 italic text-2xl">
                      –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...
                    </div>
                  )}
                </div>
              </div>
              <div className="absolute bottom-6 right-8 text-lg text-gray-600">
                [{pageNumber}]
              </div>
            </div>
          );
        }
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥–ª—É—à–∫–∞–º–∏
      const startPage = characterList.length > 0 ? 4 : 4;
      for (let pageNumber = startPage; pageNumber <= 8; pageNumber++) {
        pages.push(
          <div key={`page-${pageNumber}`} className="w-full h-full bg-gradient-to-b from-yellow-50 to-orange-50 flex flex-col relative border border-yellow-200 font-serif p-8">
            <div className="flex-1 overflow-hidden">
              <h2 className="text-4xl font-bold text-center mb-12 text-gray-800 uppercase tracking-wide border-b border-yellow-300 pb-6">
                –°–û–î–ï–†–ñ–ê–ù–ò–ï
              </h2>
              <div className="flex-1 flex items-center justify-center text-center">
                <div className="space-y-8 text-yellow-700 italic">
                  <p className="text-2xl">–ò—Å—Ç–æ—Ä–∏—è –µ—â—ë –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–∞...</p>
                  <p className="text-xl">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.</p>
                  {pageNumber === 8 && (
                    <div className="mt-10 border-t border-yellow-300 pt-8">
                      <p className="text-3xl font-bold text-gray-800 not-italic uppercase">–ö–û–ù–ï–¶</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
            <div className="absolute bottom-6 right-8 text-lg text-yellow-600">
              [{pageNumber}]
            </div>
          </div>
        );
      }
    }

    return pages;
  };

  return (
    <div className="w-full max-w-5xl mx-auto p-6 md:p-8">
      {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è */}
      <div className="flex justify-center mb-8">
        <Button
          onClick={downloadPDF}
          disabled={isDownloading}
          className="bg-green-600 hover:bg-green-700 text-white px-8 py-4 rounded-lg font-medium shadow-lg transition-all duration-300 hover:shadow-xl transform hover:-translate-y-1 text-lg"
        >
          {isDownloading ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent mr-3"></div>
              –°–æ–∑–¥–∞–Ω–∏–µ PDF...
            </>
          ) : (
            <>
              üìö –°–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É PDF
            </>
          )}
        </Button>
      </div>

      {/* –ö–Ω–∏–≥–∞ */}
      <div ref={bookRef} className="flex justify-center my-8 transform-gpu perspective-1000 animate-fadeIn">
        <HTMLFlipBook
          width={600}
          height={750}
          minWidth={300}
          maxWidth={650}
          minHeight={400}
          maxHeight={800}
          className="filter drop-shadow-2xl rounded-xl overflow-hidden"
          style={{}}
          startPage={0}
          size="fixed"
          drawShadow={true}
          flippingTime={1200}
          useMouseEvents={true}
          showCover={false}
          mobileScrollSupport={true}
          usePortrait={false}
          startZIndex={1}
          autoSize={false}
          maxShadowOpacity={0.5}
          showPageCorners={true}
          disableFlipByClick={false}
          swipeDistance={30}
          clickEventForward={true}
        >
          {createBookPages()}
        </HTMLFlipBook>
      </div>
    </div>
  );
}

export default StoryDetailPage; 