import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { apiClient, getErrorMessage } from '@/services/api';
import { toastError, toastSuccess } from '@/utils/toast';
import type { CreateAvatarRequest } from '@/types/api';

export function useCreateAvatar() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (data: CreateAvatarRequest) => {
      console.log('üé® –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º:', data.prompt);
      
      const result = await apiClient.createAvatar(data.prompt);
      
      console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', {
        avatar_id: result.avatar_id,
        status: result.status,
        prompt: result.prompt,
        user_id: result.user_id,
        created_at: result.created_at,
        image_url: result.image_url
      });
      
      return result;
    },
    onSuccess: (data) => {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...');
      queryClient.invalidateQueries({ queryKey: ['avatars'] });
      
      console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å:', data.status);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ–ª–µ–µ –≥–∏–±–∫–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const statusStr = String(data.status).toLowerCase();
      if (statusStr === 'pending' || statusStr === 'generating' || statusStr === 'in_progress') {
        console.log('‚è≥ –ê–≤–∞—Ç–∞—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
      } else if (statusStr === 'completed') {
        console.log('üéâ –ê–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!');
      } else {
        console.log('‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞:', statusStr);
      }
    },
    onError: (error) => {
      console.error('Create avatar error in hook:', error);
      // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast –¥–ª—è –æ—à–∏–±–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ UI
      const errorData = (error as any)?.details || (error as any)?.response?.data?.detail;
      if (errorData?.error !== 'content_policy_violation') {
        toastError(getErrorMessage(error));
      }
    },
  });
}

export function useAvatars(page = 1, perPage = 10) {
  return useQuery({
    queryKey: ['avatars', page, perPage],
    queryFn: async () => {
      console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${perPage}`);
      
      const result = await apiClient.getAvatars(page, perPage);
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤: ${result.avatars.length} –∏–∑ ${result.total}`);
      
      if (result.avatars.length === 0) {
        console.log('‚ùå –ê–í–ê–¢–ê–†–´ –ù–ï –ù–ê–ô–î–ï–ù–´! –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('1. –ê–≤–∞—Ç–∞—Ä—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å');
        console.log('2. –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥–µ');
        console.log('3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞');
      } else {
        console.log('üé≠ –î–µ—Ç–∞–ª–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤:');
        result.avatars.forEach((avatar, index) => {
          console.log(`  ${index + 1}. ID: ${avatar.avatar_id}`);
          console.log(`     –°—Ç–∞—Ç—É—Å: ${avatar.status}`);
          console.log(`     –ü—Ä–æ–º–ø—Ç: ${avatar.prompt.slice(0, 50)}...`);
          console.log(`     –°–æ–∑–¥–∞–Ω: ${avatar.created_at}`);
          console.log(`     –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${avatar.image_url || '–ù–ï–¢'}`);
          console.log(`     ---`);
        });
      }
      
      return result;
    },
    refetchInterval: (query) => {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const data = query.state.data;
      const hasGenerating = data?.avatars?.some((avatar: any) => {
        const status = String(avatar.status).toLowerCase();
        return status === 'generating' || status === 'pending' || status === 'in_progress';
      });
      
      if (hasGenerating) {
        console.log('‚è≥ –ï—Å—Ç—å –∞–≤–∞—Ç–∞—Ä—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥');
      }
      
      return hasGenerating ? 5000 : false;
    },
    refetchIntervalInBackground: true,
  });
}

export function useAvatar(avatarId: string) {
  return useQuery({
    queryKey: ['avatar', avatarId],
    queryFn: () => apiClient.getAvatar(avatarId),
    enabled: !!avatarId,
  });
}

export function useDeleteAvatar() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (avatarId: string) => apiClient.deleteAvatar(avatarId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['avatars'] });
    },
    onError: (error) => {
      console.error('Delete avatar error in hook:', error);
      toastError(getErrorMessage(error));
    },
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ API
export function getAvatarImageUrl(avatarId: string): string {
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ query parameter –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
  const token = localStorage.getItem('access_token');
  const baseUrl = `/api/v1/avatars/${avatarId}/image`;
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  return token ? `${baseUrl}?token=${token}` : baseUrl;
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è blob –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
export function useAvatarImage(avatarId: string, enabled = true) {
  return useQuery({
    queryKey: ['avatar-image', avatarId],
    queryFn: async () => {
      console.log('Fetching image for avatar:', avatarId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      const token = localStorage.getItem('access_token');
      console.log('Token available:', !!token, token ? 'Token length:' + token.length : 'No token');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
        const imageUrl = apiClient.getAvatarImageUrl(avatarId);
        console.log('Avatar image URL:', imageUrl);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const response = await fetch(imageUrl, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        console.log('Image response:', response.status, response.headers.get('content-type'));
        
        // –ü–æ–ª—É—á–∞–µ–º blob
        const blob = await response.blob();
        console.log('Blob size:', blob.size, 'type:', blob.type);
        
        if (blob.size === 0) {
          throw new Error('Received empty blob');
        }
        
        const blobUrl = URL.createObjectURL(blob);
        console.log('Created blob URL:', blobUrl);
        
        return blobUrl;
      } catch (error: any) {
        console.error('Error fetching avatar image:', error);
        console.error('Detailed error:', getErrorMessage(error));
        throw error;
      }
    },
    enabled: !!avatarId && enabled,
    staleTime: 60000, // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    retry: 2, // –†–∞–∑—Ä–µ—à–∞–µ–º 2 –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    retryDelay: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
  });
} 