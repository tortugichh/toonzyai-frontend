import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { apiClient, getErrorMessage } from '@/services/api';

interface DebugInfo {
  timestamp: string;
  action: string;
  status: 'success' | 'error' | 'info';
  message: string;
  details?: any;
}

function AvatarDebugPanel() {
  const [logs, setLogs] = useState<DebugInfo[]>([]);
  const [testPrompt, setTestPrompt] = useState('–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏');
  const [isLoading, setIsLoading] = useState(false);

  const addLog = (action: string, status: 'success' | 'error' | 'info', message: string, details?: any) => {
    const newLog: DebugInfo = {
      timestamp: new Date().toLocaleTimeString(),
      action,
      status,
      message,
      details
    };
    
    setLogs(prev => [newLog, ...prev.slice(0, 19)]); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
    console.log(`[${newLog.timestamp}] ${action}:`, message, details);
  };

  const clearLogs = () => setLogs([]);

  const testAuthStatus = async () => {
    addLog('AUTH_CHECK', 'info', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    try {
      const accessToken = localStorage.getItem('access_token');
      const refreshToken = localStorage.getItem('refresh_token');
      
      addLog('TOKENS', 'info', `Access Token: ${accessToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}, Refresh Token: ${refreshToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
      
      if (!accessToken) {
        addLog('AUTH_CHECK', 'error', '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
        return;
      }

      const user = await apiClient.getCurrentUser();
      addLog('AUTH_CHECK', 'success', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (${user.email})`);
      
    } catch (error) {
      addLog('AUTH_CHECK', 'error', `–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${getErrorMessage(error)}`);
    }
  };

  const testBackendConnection = async () => {
    addLog('BACKEND_TEST', 'info', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å backend...');
    
    try {
      const health = await apiClient.checkHealth();
      addLog('BACKEND_TEST', 'success', `Backend –¥–æ—Å—Ç—É–ø–µ–Ω: ${health.status}`);
    } catch (error) {
      addLog('BACKEND_TEST', 'error', `Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${getErrorMessage(error)}`);
    }
  };

  const testCreateAvatar = async () => {
    if (!testPrompt.trim()) {
      addLog('CREATE_AVATAR', 'error', '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞');
      return;
    }

    setIsLoading(true);
    addLog('CREATE_AVATAR', 'info', `–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞: "${testPrompt}"`);
    
    try {
      const avatar = await apiClient.createAvatar(testPrompt);
      addLog('CREATE_AVATAR', 'success', `–ê–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω: ${avatar.avatar_id}`, avatar);
      
      // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setTimeout(() => testImageLoad(avatar.avatar_id), 2000);
      
    } catch (error) {
      addLog('CREATE_AVATAR', 'error', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${getErrorMessage(error)}`);
    } finally {
      setIsLoading(false);
    }
  };

  const testImageLoad = async (avatarId?: string) => {
    if (!avatarId) {
      // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
      try {
        const avatarsResponse = await apiClient.getAvatars(1, 1);
        if (avatarsResponse.avatars.length === 0) {
          addLog('IMAGE_TEST', 'error', '–ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          return;
        }
        avatarId = avatarsResponse.avatars[0].avatar_id;
        addLog('IMAGE_TEST', 'info', `–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä: ${avatarId}`);
      } catch (error) {
        addLog('IMAGE_TEST', 'error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤');
        return;
      }
    }

    addLog('IMAGE_TEST', 'info', `–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${avatarId}`);
    
    try {
      const token = localStorage.getItem('access_token');
      addLog('IMAGE_TEST', 'info', `–¢–æ–∫–µ–Ω: ${token ? `${token.substring(0, 20)}...` : '–ù–ï–¢'}`);
      
      if (!token) {
        addLog('IMAGE_TEST', 'error', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }
      
      // –¢–µ—Å—Ç 1: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
      try {
        addLog('IMAGE_TEST', 'info', '–¢–µ—Å—Ç 1 - –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ getAvatarImageBlob');
        const blob = await apiClient.getAvatarImageBlob(avatarId);
        addLog('IMAGE_TEST', 'success', `‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${blob.size} –±–∞–π—Ç`);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageUrl = URL.createObjectURL(blob);
        addLog('IMAGE_TEST', 'success', `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ URL: ${imageUrl}`);
        return;
      } catch (blobError) {
        addLog('IMAGE_TEST', 'error', `–ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ—É–¥–∞—á–µ–Ω: ${getErrorMessage(blobError)}`);
      }
      
      // –¢–µ—Å—Ç 2: Query –ø–∞—Ä–∞–º–µ—Ç—Ä (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
      const queryUrl = apiClient.getAvatarImageUrl(avatarId);
      addLog('IMAGE_TEST', 'info', `–¢–µ—Å—Ç 2 - Query URL: ${queryUrl}`);
      
      const queryResponse = await fetch(queryUrl);
      addLog('IMAGE_TEST', 'info', `Query —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${queryResponse.status} ${queryResponse.statusText}`);
      
      if (queryResponse.ok) {
        const blob = await queryResponse.blob();
        addLog('IMAGE_TEST', 'success', `‚úÖ Query –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${blob.size} –±–∞–π—Ç`);
        return;
      }
      
      // –¢–µ—Å—Ç 3: Bearer –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
      const bearerUrl = `/api/v1/avatars/${avatarId}/image`;
      addLog('IMAGE_TEST', 'info', `–¢–µ—Å—Ç 3 - Bearer —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${bearerUrl}`);
      
      const bearerResponse = await fetch(bearerUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'image/*'
        }
      });
      
      addLog('IMAGE_TEST', 'info', `Bearer —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${bearerResponse.status} ${bearerResponse.statusText}`);
      
      if (bearerResponse.ok) {
        const blob = await bearerResponse.blob();
        addLog('IMAGE_TEST', 'success', `‚úÖ Bearer —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${blob.size} –±–∞–π—Ç`);
        return;
      }
      
      // –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
      const errorText = await bearerResponse.text();
      addLog('IMAGE_TEST', 'error', `‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ—É–¥–∞—á–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${errorText}`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞
      try {
        const user = await apiClient.getCurrentUser();
        addLog('IMAGE_TEST', 'info', `–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è API: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username}`);
      } catch (tokenError) {
        addLog('IMAGE_TEST', 'error', `–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${getErrorMessage(tokenError)}`);
      }
      
    } catch (error) {
      addLog('IMAGE_TEST', 'error', `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${getErrorMessage(error)}`);
    }
  };

  const testFullFlow = async () => {
    addLog('FULL_TEST', 'info', '–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    await testBackendConnection();
    await testAuthStatus();
    await testCreateAvatar();
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return '‚úÖ';
      case 'error': return '‚ùå';
      default: return '‚ÑπÔ∏è';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success': return 'text-green-600 bg-green-50';
      case 'error': return 'text-red-600 bg-red-50';
      default: return 'text-blue-600 bg-blue-50';
    }
  };

  return (
    <Card className="p-6 bg-white/90 backdrop-blur-sm border border-gray-200 shadow-lg">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤</h3>
      
      {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤ */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-2 mb-4">
        <Button onClick={testBackendConnection} variant="outline" size="sm">
          üåê Backend
        </Button>
        <Button onClick={testAuthStatus} variant="outline" size="sm">
          üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        </Button>
        <Button 
          onClick={() => testImageLoad()} 
          variant="outline" 
          size="sm"
        >
          üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        </Button>
        <Button 
          onClick={testCreateAvatar} 
          variant="outline" 
          size="sm"
          disabled={isLoading}
        >
          {isLoading ? '‚è≥' : 'üé®'} –°–æ–∑–¥–∞—Ç—å
        </Button>
        <Button onClick={testFullFlow} variant="outline" size="sm" disabled={isLoading}>
          üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
        </Button>
      </div>

      {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ */}
      <div className="mb-4">
        <Input
          value={testPrompt}
          onChange={(e) => setTestPrompt(e.target.value)}
          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
          className="w-full"
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ */}
      <div className="flex justify-between items-center mb-4">
        <span className="text-sm text-gray-600">–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:</span>
        <Button onClick={clearLogs} variant="outline" size="sm">
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
        </Button>
      </div>

      {/* –õ–æ–≥–∏ */}
      <div className="max-h-64 overflow-y-auto space-y-2">
        {logs.length === 0 ? (
          <div className="text-center text-gray-500 py-4">
            –ù–µ—Ç –ª–æ–≥–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ.
          </div>
        ) : (
          logs.map((log, index) => (
            <div 
              key={index}
              className={`p-2 rounded-md text-xs ${getStatusColor(log.status)}`}
            >
              <div className="flex items-start justify-between">
                <span className="font-mono">
                  {getStatusIcon(log.status)} [{log.timestamp}] {log.action}
                </span>
              </div>
              <div className="mt-1">{log.message}</div>
              {log.details && (
                <details className="mt-1">
                  <summary className="cursor-pointer text-gray-500">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</summary>
                  <pre className="mt-1 text-xs overflow-x-auto">
                    {JSON.stringify(log.details, null, 2)}
                  </pre>
                </details>
              )}
            </div>
          ))
        )}
      </div>
    </Card>
  );
}

export default AvatarDebugPanel;
export { AvatarDebugPanel };