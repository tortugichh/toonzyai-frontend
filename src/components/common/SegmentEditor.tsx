import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { useTaskProgress, useGenerateSegment, useSegmentProgressWS, useUpdateSegmentPrompt } from '@/hooks/useAnimations';
import type { AnimationSegment } from '@/services/api';
import { LazyLoadImage } from 'react-lazy-load-image-component';
import 'react-lazy-load-image-component/src/effects/blur.css';
import { toastError, toastSuccess } from '@/utils/toast';

interface SegmentEditorProps {
  projectId: string;
  segment: AnimationSegment;
  onUpdate: () => void;
}

export function SegmentEditor({ projectId, segment, onUpdate }: SegmentEditorProps) {
  const [prompt, setPrompt] = useState(segment.segment_prompt ?? '');
  const [isEditing, setIsEditing] = useState(!segment.segment_prompt);
  const [isGenerating, setIsGenerating] = useState(false);

  const updatePromptMutation = useUpdateSegmentPrompt();
  const generateSegmentMutation = useGenerateSegment();

  // live progress via WebSocket (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω)
  const skipWS = segment.status === 'completed' || segment.status === 'failed';
  useSegmentProgressWS(segment.id, projectId, skipWS);

  const handleGenerateClick = async () => {
    if (prompt.trim().length < 10) {
      toastError('–ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }
    setIsGenerating(true);
    try {
      // 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
      if (prompt !== segment.segment_prompt) {
        await updatePromptMutation.mutateAsync({
          projectId,
          segmentNumber: segment.segment_number,
          segmentPrompt: prompt.trim(),
        });
      }
      // 2) –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      await generateSegmentMutation.mutateAsync({
        projectId,
        segmentNumber: segment.segment_number,
        segmentPrompt: prompt.trim(),
      });
      // –ø—Ä—è—á–µ–º textarea, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
      setIsEditing(false);
      onUpdate();
    } catch (error:any) {
      toastError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞');
    } finally {
      setIsGenerating(false);
    }
  };

  const getStatusIcon = () => {
    switch (segment.status) {
      case 'completed': return '‚úÖ';
      case 'in_progress': return 'üîÑ';
      case 'pending': return '‚è≥';
      case 'failed': return '‚ùå';
      default: return '‚ùì';
    }
  };
  
  const getStatusText = () => {
    const progress = segment.progress ?? 0;
    switch (segment.status) {
      case 'completed': return '–ì–æ—Ç–æ–≤–æ';
      case 'in_progress': return `–í –ø—Ä–æ—Ü–µ—Å—Å–µ (${progress}%)`;
      case 'pending': return '–í –æ—á–µ—Ä–µ–¥–∏';
      case 'failed': return '–û—à–∏–±–∫–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getPromptSource = () => {
    if (segment.prompts?.prompt_source === 'custom') {
      return 'üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π';
    }
    return 'üìù –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é';
  };

  return (
    <Card className="segment-editor p-4 mb-4 bg-white shadow-sm">
      <div className="segment-header flex justify-between items-center mb-3">
        <h3 className="text-lg font-semibold">
          –°–µ–≥–º–µ–Ω—Ç {segment.segment_number} {getStatusIcon()}
        </h3>
        <span className="prompt-source text-xs px-2 py-1 rounded bg-gray-100 text-gray-600">
          {getPromptSource()}
        </span>
      </div>

      <div className="prompt-source mt-4">
        {isEditing ? (
          <textarea
            className="prompt-input w-full p-2 border border-gray-300 rounded resize-vertical"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞..."
            rows={4}
          />
        ) : (
          <div className="prompt-display group relative">
            <p className="text-gray-700 whitespace-pre-wrap pr-8">
              {prompt || '–ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–¥–∞–Ω'}
            </p>
            {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å */}
            {segment.status !== 'completed' && (
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsEditing(true)}
                className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity h-8 w-8"
              >
                ‚úèÔ∏è
              </Button>
            )}
          </div>
        )}
      </div>

      {/* Progress bar */}
      {segment.status === 'in_progress' && (
        <div className="mb-3">
          <div className="flex justify-between text-xs text-gray-600 mb-1">
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span><span>{segment.progress}%</span>
          </div>
          <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
            <div className="h-2 bg-blue-500" style={{width:`${segment.progress}%`}} />
          </div>
        </div>
      )}

      {segment.status !== 'completed' && (
        <div className="actions mt-4">
          <Button
            onClick={handleGenerateClick}
            disabled={isGenerating || segment.status === 'in_progress' || !prompt.trim()}
            className="btn-generate"
          >
            {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚ñ∂Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'}
          </Button>
        </div>
      )}

      {segment.generated_video_url && (
        <div className="video-preview">
          <video 
            src={segment.generated_video_url} 
            controls 
            className="segment-video w-full max-w-md rounded shadow-sm"
          />
        </div>
      )}

      {segment.video_url && !segment.generated_video_url && (
        <div className="video-preview">
          <LazyLoadImage 
            src={segment.start_frame_url}
            alt={`–°–µ–≥–º–µ–Ω—Ç ${segment.segment_number}`}
            effect="blur"
            className="w-full max-w-md h-40 object-cover rounded"
          />
        </div>
      )}
    </Card>
  );
} 