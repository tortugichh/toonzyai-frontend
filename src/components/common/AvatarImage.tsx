import { useState, useEffect } from 'react';
import { apiClient } from '../../services/api';

interface AvatarImageProps {
  avatar: {
    avatar_id: string;
    image_url?: string;
    status?: string;
  };
  className?: string;
  showPlaceholder?: boolean;
}

const AvatarImage = ({ avatar, className = '', showPlaceholder = true }: AvatarImageProps) => {
  const [imageLoaded, setImageLoaded] = useState(false);
  const [hasError, setHasError] = useState(false);
  const [blobUrl, setBlobUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log(`üñºÔ∏è AvatarImage –¥–ª—è ${avatar.avatar_id}:`, {
    status: avatar.status,
    hasImageUrl: !!avatar.image_url,
    imageUrl: avatar.image_url
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ API
  useEffect(() => {
    const loadImageWithAuth = async () => {
      if (!avatar.avatar_id) return;
      
      setIsLoading(true);
      setHasError(false);
      
      try {
        console.log('üîê –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è:', avatar.avatar_id);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        const blob = await apiClient.getAvatarImageBlob(avatar.avatar_id);
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥:', blob.size, '–±–∞–π—Ç');
        
        if (blob.size === 0) {
          throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª');
        }

        const url = URL.createObjectURL(blob);
        setBlobUrl(url);
        console.log('üéØ Blob URL —Å–æ–∑–¥–∞–Ω:', url);
        
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        setHasError(true);
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∞ "completed", –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
        if (avatar.status === 'completed') {
          console.error('‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        }
      } finally {
        setIsLoading(false);
      }
    };

    loadImageWithAuth();

    // Cleanup blob URL –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (blobUrl) {
        URL.revokeObjectURL(blobUrl);
      }
    };
  }, [avatar.avatar_id]);

  const imageUrl = blobUrl || avatar.image_url;

  const handleImageLoad = () => {
    setImageLoaded(true);
    setHasError(false);
  };

  const handleImageError = () => {
    setHasError(true);
    setImageLoaded(false);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  if (hasError && !isLoading) {
    if (!showPlaceholder) return null;
    
    return (
      <div className={`bg-gray-200 rounded-lg flex items-center justify-center ${className}`}>
        <div className="text-center p-4">
          <div className="text-4xl mb-2">‚ö†Ô∏è</div>
          <p className="text-gray-500 text-sm">
            {avatar.status === 'completed' ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' : '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...'}
          </p>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
  if (isLoading || !imageUrl) {
    return (
      <div className={`bg-gray-100 rounded-lg flex items-center justify-center ${className}`}>
        <div className="text-center p-4">
          <div className="animate-spin rounded-full h-8 w-8 border-2 border-blue-600 border-t-transparent mx-auto mb-2"></div>
          <p className="text-gray-500 text-sm">
            {avatar.status === 'completed' ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...'}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className={`relative ${className}`}>
      {!imageLoaded && (
        <div className="absolute inset-0 bg-gray-100 rounded-lg flex items-center justify-center">
          <div className="animate-spin rounded-full h-6 w-6 border-2 border-blue-600 border-t-transparent"></div>
        </div>
      )}
      <img
        src={imageUrl}
        alt="Avatar"
        className={`w-full h-full object-cover rounded-lg transition-opacity duration-300 ${
          imageLoaded ? 'opacity-100' : 'opacity-0'
        }`}
        onLoad={handleImageLoad}
        onError={handleImageError}
      />
    </div>
  );
};

export default AvatarImage; 